// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: internal/interfaces/grpc/proto/user_secret.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserSecrets_CreateUserSecret_FullMethodName = "/diploma.UserSecrets/CreateUserSecret"
	UserSecrets_DeleteUserSecret_FullMethodName = "/diploma.UserSecrets/DeleteUserSecret"
	UserSecrets_GetUserSecrets_FullMethodName   = "/diploma.UserSecrets/GetUserSecrets"
)

// UserSecretsClient is the client API for UserSecrets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSecretsClient interface {
	CreateUserSecret(ctx context.Context, in *CreateUserSecretRequest, opts ...grpc.CallOption) (*CreateUserSecretResponse, error)
	DeleteUserSecret(ctx context.Context, in *DeleteUserSecretRequest, opts ...grpc.CallOption) (*DeleteUserSecretResponse, error)
	GetUserSecrets(ctx context.Context, in *GetUserSecretsRequest, opts ...grpc.CallOption) (*GetUserSecretsResponse, error)
}

type userSecretsClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSecretsClient(cc grpc.ClientConnInterface) UserSecretsClient {
	return &userSecretsClient{cc}
}

func (c *userSecretsClient) CreateUserSecret(ctx context.Context, in *CreateUserSecretRequest, opts ...grpc.CallOption) (*CreateUserSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserSecretResponse)
	err := c.cc.Invoke(ctx, UserSecrets_CreateUserSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSecretsClient) DeleteUserSecret(ctx context.Context, in *DeleteUserSecretRequest, opts ...grpc.CallOption) (*DeleteUserSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserSecretResponse)
	err := c.cc.Invoke(ctx, UserSecrets_DeleteUserSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSecretsClient) GetUserSecrets(ctx context.Context, in *GetUserSecretsRequest, opts ...grpc.CallOption) (*GetUserSecretsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserSecretsResponse)
	err := c.cc.Invoke(ctx, UserSecrets_GetUserSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSecretsServer is the server API for UserSecrets service.
// All implementations must embed UnimplementedUserSecretsServer
// for forward compatibility.
type UserSecretsServer interface {
	CreateUserSecret(context.Context, *CreateUserSecretRequest) (*CreateUserSecretResponse, error)
	DeleteUserSecret(context.Context, *DeleteUserSecretRequest) (*DeleteUserSecretResponse, error)
	GetUserSecrets(context.Context, *GetUserSecretsRequest) (*GetUserSecretsResponse, error)
	mustEmbedUnimplementedUserSecretsServer()
}

// UnimplementedUserSecretsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserSecretsServer struct{}

func (UnimplementedUserSecretsServer) CreateUserSecret(context.Context, *CreateUserSecretRequest) (*CreateUserSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserSecret not implemented")
}
func (UnimplementedUserSecretsServer) DeleteUserSecret(context.Context, *DeleteUserSecretRequest) (*DeleteUserSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserSecret not implemented")
}
func (UnimplementedUserSecretsServer) GetUserSecrets(context.Context, *GetUserSecretsRequest) (*GetUserSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSecrets not implemented")
}
func (UnimplementedUserSecretsServer) mustEmbedUnimplementedUserSecretsServer() {}
func (UnimplementedUserSecretsServer) testEmbeddedByValue()                     {}

// UnsafeUserSecretsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSecretsServer will
// result in compilation errors.
type UnsafeUserSecretsServer interface {
	mustEmbedUnimplementedUserSecretsServer()
}

func RegisterUserSecretsServer(s grpc.ServiceRegistrar, srv UserSecretsServer) {
	// If the following call pancis, it indicates UnimplementedUserSecretsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserSecrets_ServiceDesc, srv)
}

func _UserSecrets_CreateUserSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSecretsServer).CreateUserSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSecrets_CreateUserSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSecretsServer).CreateUserSecret(ctx, req.(*CreateUserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSecrets_DeleteUserSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSecretsServer).DeleteUserSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSecrets_DeleteUserSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSecretsServer).DeleteUserSecret(ctx, req.(*DeleteUserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSecrets_GetUserSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSecretsServer).GetUserSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSecrets_GetUserSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSecretsServer).GetUserSecrets(ctx, req.(*GetUserSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSecrets_ServiceDesc is the grpc.ServiceDesc for UserSecrets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSecrets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "diploma.UserSecrets",
	HandlerType: (*UserSecretsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserSecret",
			Handler:    _UserSecrets_CreateUserSecret_Handler,
		},
		{
			MethodName: "DeleteUserSecret",
			Handler:    _UserSecrets_DeleteUserSecret_Handler,
		},
		{
			MethodName: "GetUserSecrets",
			Handler:    _UserSecrets_GetUserSecrets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/interfaces/grpc/proto/user_secret.proto",
}
